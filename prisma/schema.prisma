// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    user_id           BigInt?
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    bio           String?    @db.Text
    soad          Boolean?
    accounts      Account[]
    sessions      Session[]
    isOnboarded   Boolean    @default(false)
    interests     Interest[]
    attempts      Attempt[]  @relation("by")
    views         Attempt[]  @relation("view")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Interest {
    userId String
    value  String
    label  String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, value])
    @@index([userId])
}

model Attempt {
    id        String   @id @default(cuid())
    userId    String
    forId     String
    user      User     @relation("by", fields: [userId], references: [id], onDelete: Cascade)
    forUser   User     @relation("view", fields: [forId], references: [id])
    createdAt DateTime @default(now())

    @@index([userId])
    @@index([forId])
}
