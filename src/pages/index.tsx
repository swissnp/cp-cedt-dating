import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import type { GetServerSidePropsContext } from "next";
import { getServerAuthSession } from "~/server/auth";
import type { Session } from "next-auth";
import { useState } from "react";
export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { data: sessionData, status } = useSession();
  const [findoutClicked, setFindoutClicked] = useState(false);
  return (
    <>
      <Head>
        <title>soad mai?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {status === "loading" && (
        <div className="fixed inset-0 z-50 flex h-full w-full items-center justify-center bg-base-100 bg-opacity-90">
          <div className="flex flex-col items-center justify-center gap-4">
            <div className="loading loading-spinner loading-lg"></div>
          </div>
        </div>
      )}
      <main
        className="flex min-h-screen flex-col items-center justify-center"
        onClick={() => setFindoutClicked(false)}
      >
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-secondary-content sm:text-[5rem]">
            <span className="text-[#8e0e19]"></span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              {"soad "}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              mai?
            </span>
          </h1>
          <div className="grid h-fit grid-cols-1 gap-4 text-base-content sm:grid-cols-3 md:gap-8">
            <div className="relative flex h-full w-full">
              <div
                className={`absolute left-0 right-0 top-0 flex h-full w-full max-w-xs flex-col justify-between transition delay-75 duration-300 ease-in-out ${
                  !findoutClicked ? "invisible" : "visible"
                }`}
              >
                <Link
                  href={"/handle"}
                  className="btn btn-secondary w-full"
                  onClick={(e) => {
                    e.stopPropagation();
                    setFindoutClicked(true);
                  }}
                >
                  by IG handle
                </Link>
                <Link
                  href={"/interest"}
                  className="btn btn-secondary w-full"
                  onClick={(e) => {
                    e.stopPropagation();
                    setFindoutClicked(true);
                  }}
                >
                  by Interest
                </Link>
              </div>
              <div
                className={`flex h-full max-w-xs flex-col gap-4 rounded-xl bg-gray-500/50 p-4 transition delay-75 duration-300 ease-in-out ${
                  findoutClicked ? "invisible" : "visible"
                } ${
                  !!sessionData &&
                  "bg-primary/60 hover:bg-primary/70 hover:drop-shadow-2xl"
                }`}
                onClick={(e) => {
                  e.stopPropagation();
                  setFindoutClicked(true);
                }}
              >
                <h3 className="text-2xl font-bold">Find out</h3>
                <div className="text-lg text-base-content">
                  แอบชอบแต่ไม่รู้ว่าเขาโสดรึเปล่า?
                </div>
              </div>
            </div>

            <Card
              head="Get Listed?"
              body="บอกให้โลกรู้ว่าเราโสด"
              link="/onboarding"
              isLogin={!!sessionData}
            />
            <Card
              head="Taken?"
              body="มีเจ้าของแล้วจ้า"
              link="/onboarding"
              isLogin={!!sessionData}
            />
          </div>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase sessionData={sessionData ?? undefined} />
          </div>
        </div>
      </main>
    </>
  );
}

function Card({
  head,
  body,
  link,
  isLogin,
}: {
  head: string;
  body: string;
  link: string;
  isLogin: boolean;
}) {
  if (isLogin) {
    return (
      <Link
        href={link}
        className={`flex h-full max-w-xs flex-col gap-4 rounded-xl bg-gray-500/50 p-4 transition delay-75 duration-300 ease-in-out ${
          isLogin && "bg-primary/60 hover:bg-primary/70 hover:drop-shadow-2xl"
        }`}
      >
        <h3 className="text-2xl font-bold">{head}</h3>
        <div className="text-lg text-base-content">{body}</div>
      </Link>
    );
  } else {
    return (
      <div
        className={`flex h-full max-w-xs flex-col gap-4 rounded-xl bg-gray-500/50 p-4 transition delay-75 duration-300 ease-in-out`}
      >
        <h3 className="text-2xl font-bold">{head}</h3>
        <div className="text-lg text-base-content">{body}</div>
      </div>
    );
  }
}

function AuthShowcase({ sessionData }: { sessionData?: Session }) {
  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {sessionData ? (
        <button className="btn btn-secondary" onClick={() => void signOut()}>
          {"Sign out"}
        </button>
      ) : (
        <Link href="/auth/login" className="btn btn-secondary">
          Login
        </Link>
      )}
    </div>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerAuthSession(context);
  if (!session?.user?.id) {
    // not logged in
    return {
      props: {},
    };
  }
  if (!session.user.isEmailVerified) {
    // not verified
    return {
      redirect: {
        destination: "/verify",
        permanent: true,
      },
    };
  }
  if (!session.user.isOnboarded) {
    // not onboarded
    return {
      redirect: {
        destination: "/onboarding",
        permanent: true,
      },
    };
  }
  return {
    // logged in and verified and onboarded
    props: {},
  };
}
