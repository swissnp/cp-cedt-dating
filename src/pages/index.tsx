import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import type { GetServerSidePropsContext } from "next";
import { getServerAuthSession } from "~/server/auth";
import type { Session } from "next-auth";
import { useState } from "react";
import { UserCardModal } from "~/components/userCard";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { IGHandleSchema, type IIGHandle } from "~/utils/validator/userInput";
export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { data: sessionData, status } = useSession();
  const [findoutClicked, setFindoutClicked] = useState(false);

  return (
    <>
      <Head>
        <title>soad mai?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {status === "loading" && (
        <div className="fixed inset-0 z-50 flex h-full w-full items-center justify-center bg-base-100 bg-opacity-90">
          <div className="flex flex-col items-center justify-center gap-4">
            <div className="loading loading-spinner loading-lg"></div>
          </div>
        </div>
      )}
      <main
        className="flex min-h-screen flex-col items-center justify-center"
        onClick={() => setFindoutClicked(false)}
      >
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-secondary-content sm:text-[5rem]">
            <span className="text-[#8e0e19]"></span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              {"soad "}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              mai?
            </span>
          </h1>
          <div className="grid grid-cols-1 gap-4 text-base-content sm:grid-cols-3 md:gap-8">
            {!sessionData ? (
              <Card
                head="üèÄ Find your community"
                body="‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô"
              />
            ) : (
              <Card
                head="üèÄ Find your community"
                body="‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô"
                link="/interest"
              />
            )}

            <CardWithForm
              toggle={() => setFindoutClicked(true)}
              findoutClicked={findoutClicked}
              isLogin={!!sessionData}
            />
            {!sessionData ? (
              <Card
                head="üìù Get Listed"
                body="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏´‡∏≤‡πÄ‡∏à‡∏≠"
              />
            ) : (
              <Card
                head="üìù Get Listed"
                body="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏´‡∏≤‡πÄ‡∏à‡∏≠"
                link="/onboarding"
              />
            )}
          </div>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase sessionData={sessionData ?? undefined} />
          </div>
        </div>
      </main>
    </>
  );
}

function Card({
  head,
  body,
  link,
}: {
  head: string;
  body: string;
  link?: string;
}) {
  if (link) {
    return (
      <Link
        href={link}
        className={`flex max-w-xs flex-col gap-4 rounded-xl p-4 transition delay-75 duration-300 ease-in-out ${
          link && "bg-primary/60 hover:bg-primary/70 hover:drop-shadow-xl"
        }`}
      >
        <h3 className="flex flex-1 text-2xl font-bold">{head}</h3>
        <div className="flex flex-1 text-lg text-base-content">{body}</div>
      </Link>
    );
  } else {
    return (
      <div
        className={`flex max-w-xs flex-col gap-4 rounded-xl bg-gray-500/50 p-4 transition delay-75 duration-300 ease-in-out`}
      >
        <h3 className="flex flex-1 text-2xl font-bold">{head}</h3>
        <div className="flex flex-1 text-lg text-base-content">{body}</div>
      </div>
    );
  }
}

function CardWithForm({
  toggle,
  findoutClicked,
  isLogin,
}: {
  toggle: () => void;
  findoutClicked: boolean;
  isLogin: boolean;
}) {
  const [IGHandle, setIGHandle] = useState({
    handle: "",
    enabled: false,
  });
  const { register, handleSubmit } = useForm<IIGHandle>({
    mode: "onBlur",
    resolver: zodResolver(IGHandleSchema),
  });
  return (
    <>
      <UserCardModal
        modalId="modal_ig_handle"
        handle={IGHandle.handle}
        enabled={IGHandle.enabled}
      />
      <div
        className="relative flex w-full"
        onClick={(e) => e.stopPropagation()}
      >
        <div
          className={`absolute bottom-0 left-0 right-0 top-0 flex w-full max-w-xs flex-col justify-between transition delay-75 duration-300 ease-in-out md:py-5 lg:py-0 ${
            !(findoutClicked && isLogin) ? "invisible" : "visible"
          }`}
        >
          <input
            type="text"
            className="input input-primary mb-2 flex w-full flex-1 "
            placeholder="IG handle"
            {...register("handle")}
            onClick={(e) => {
              e.stopPropagation();
              toggle();
            }}
          ></input>
          <div
            className="btn btn-secondary flex w-full flex-1 "
            onClick={handleSubmit((data) => {
              setIGHandle({
                handle: data.handle,
                enabled: true,
              });
              if (document)
                (
                  document.getElementById(
                    "modal_ig_handle"
                  ) as HTMLDialogElement
                ).showModal();
              toggle();
            })}
          >
            Search
          </div>
        </div>
        <div
          className={`flex w-full max-w-xs flex-col gap-4 rounded-xl bg-gray-500/50 p-4 transition delay-75 duration-300 ease-in-out ${
            findoutClicked && isLogin ? "invisible" : "visible"
          } ${
            !!isLogin &&
            "bg-primary/60 hover:bg-primary/70 hover:drop-shadow-xl"
          }`}
          onClick={(e) => {
            e.stopPropagation();
            toggle();
          }}
        >
          <h3 className="flex flex-1 text-2xl font-bold">üîé Find out</h3>
          <div className="flex flex-1 text-lg text-base-content">
            ‡πÅ‡∏≠‡∏ö‡∏ä‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏≤‡πÇ‡∏™‡∏î‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤?
          </div>
        </div>
      </div>
    </>
  );
}
function AuthShowcase({ sessionData }: { sessionData?: Session }) {
  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {sessionData ? (
        <button className="btn btn-secondary" onClick={() => void signOut()}>
          {"Sign out"}
        </button>
      ) : (
        <Link href="/auth/login" className="btn btn-secondary">
          Login
        </Link>
      )}
    </div>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerAuthSession(context);
  if (!session?.user?.id) {
    // not logged in
    return {
      props: {},
    };
  }
  if (!session.user.isEmailVerified) {
    // not verified
    return {
      redirect: {
        destination: "/verify",
        permanent: true,
      },
    };
  }
  if (!session.user.isOnboarded) {
    // not onboarded
    return {
      redirect: {
        destination: "/onboarding",
        permanent: true,
      },
    };
  }
  return {
    // logged in and verified and onboarded
    props: {},
  };
}
