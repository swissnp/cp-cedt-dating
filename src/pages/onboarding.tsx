import Head from "next/head";
import { useForm, Controller } from "react-hook-form";
import {
  type IOnBoarding,
  onBoardingSchema,
} from "~/utils/validator/userInput";
import { zodResolver } from "@hookform/resolvers/zod";
import { useSession, signOut } from "next-auth/react";
import { api } from "~/utils/api";
import Link from "next/link";
import Image from "next/image";
import { useEffect, useMemo } from "react";
import { getServerAuthSession } from "~/server/auth";
import type { GetServerSidePropsContext } from "next";
export default function Home() {
  const { data: sessionData } = useSession();
  const previousData = api.onBoarding.getOnboardData.useQuery({});
  const {
    register,
    handleSubmit,
    control,
    setError,
    reset,
    formState: { errors, isValid, isSubmitting },
  } = useForm<IOnBoarding>({
    resolver: zodResolver(onBoardingSchema),
    mode: "onBlur",
    defaultValues: useMemo(() => {
      return {
        bio: previousData.data?.bio ?? "",
        soad: previousData.data?.soad ?? undefined,
      };
    }, [previousData]),
  });

  useEffect(() => {
    reset({
      bio: previousData.data?.bio ?? "",
      soad: previousData.data?.soad ?? undefined,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [previousData.data]);
  const { mutate } = api.onBoarding.setOnboarded.useMutation({
    onSuccess: () => {
      if (document) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        (document.getElementById("my_modal_1") as HTMLFormElement).showModal();
      }
    },
    onError: (error) => {
      setError("root.serverError", { message: error.message });
    },
  });

  return (
    <>
      <Head>
        <title>soad mai?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>
      <dialog id="my_modal_1" className="modal">
        <form method="dialog" className="modal-box">
          <h3 className="text-lg font-bold">
            ðŸŽ‰ Congrats! Welcome to soad mai?
          </h3>
          <p className="py-4">
            {"Now, you could find whether your crush is available or not."}
          </p>
          <div className="modal-action">
            <Link className="btn btn-primary" href="/">
              Next
            </Link>
          </div>
        </form>
      </dialog>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div
          className="btn absolute right-5 top-5"
          onClick={() => {
            void signOut({ callbackUrl: "/" });
          }}
        >
          logout
        </div>
        <div className="container flex flex-col items-center justify-center gap-6 px-4 py-16 sm:gap-12 ">
          <div className="avatar">
            <div className="w-28 rounded-full">
              <Image
                alt="avatar"
                src="https://i.pravatar.cc/"
                height="28"
                width="28"
              />
            </div>
          </div>
          <h6 className="text-3xl font-extrabold tracking-tight text-secondary-content sm:text-[4rem]">
            <span className="text-[#8e0e19] delay-75 duration-300 ease-in-out">
              {`${sessionData?.user?.name ?? ""} `}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              {"soad "}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              mai?
            </span>
          </h6>
          <div className="grid w-full grid-rows-1 items-center gap-5 font-bold sm:justify-center">
            <div className="form-control ">
              <label className="label text-lg">
                <span className="label-text text-base">
                  Tell something about yourself
                </span>
              </label>
              <textarea
                className="textarea textarea-bordered h-24 w-full sm:w-96"
                placeholder="Bio"
                {...register("bio")}
              ></textarea>
              {
                <label className="label pb-0">
                  <span className="label-text-alt pb-0 text-red-500">
                    {errors.bio?.message}
                  </span>
                </label>
              }
            </div>
            <div className="form-control">
              <div className="flex w-full flex-row justify-between">
                <label className="label text-lg"> soad mai?</label>
                <Controller
                  control={control}
                  name={"soad"}
                  render={({ field: { onChange, onBlur, value, ref } }) => (
                    <div className="join">
                      <input
                        className="btn join-item"
                        type="radio"
                        aria-label="soad"
                        onBlur={onBlur} // notify when input is touched
                        onChange={() => onChange(true)} // send value to hook form
                        checked={value === true}
                        ref={ref}
                      />
                      <input
                        className="btn join-item"
                        type="radio"
                        aria-label="mai soad"
                        onChange={() => onChange(false)} // send value to hook form
                        checked={value === false}
                        ref={ref}
                      />
                    </div>
                  )}
                />
              </div>
              {
                <label className="label pb-0">
                  <span className="label-text-alt pb-0 text-red-500">
                    {errors.soad?.message}
                    {errors.root?.serverError?.message}
                  </span>
                </label>
              }
            </div>

            <div
              className={`btn w-full ${
                isValid ? "btn-secondary" : "btn-disabled"
              } ${isSubmitting && "loading loading-spinner"}`}
              onClick={handleSubmit((data) => mutate(data))}
            >
              Submit
            </div>
          </div>
          <div className="flex flex-col items-center gap-2"></div>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerAuthSession(context);
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}
