import type { GetServerSidePropsContext } from "next";
import { getServerAuthSession } from "~/server/auth";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  type IVerificationEmail,
  VerificationEmailSchema,
} from "~/utils/validator/userInput";
import { signIn } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
export default function Verify() {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid, isSubmitting },
  } = useForm<IVerificationEmail>({
    resolver: zodResolver(VerificationEmailSchema),
    mode: "onBlur",
    defaultValues: {
      email: "",
    },
  });
  // email form with submit button
  return (
    <>
      <Head>
        <title>soad mai?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>
      <dialog id="my_modal_1" className="modal">
        <form method="dialog" className="modal-box">
          <h3 className="text-lg font-bold">Verification Email Sent!</h3>
          <p className="py-4">
            {
              "We have sent you a verification email. Please check your inbox or junk box and click on the link to verify your email."
            }
          </p>
          <div className="modal-action">
            <Link href="/" className="btn">
              Close
            </Link>
          </div>
        </form>
      </dialog>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-6 px-4 py-16 sm:gap-12  ">
          <h6 className="text-3xl font-extrabold tracking-tight text-secondary-content sm:py-4 sm:text-[4rem]">
            <span className="text-[#8e0e19] delay-75 duration-300 ease-in-out">
              {``}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              {"soad "}
            </span>
            <span className="delay-75 duration-300 ease-in-out hover:text-[#8e0e19]">
              mai?
            </span>
          </h6>
          {
            <div className="grid w-full grid-rows-1 items-center gap-5 font-bold sm:w-96 sm:justify-center">
              <p className="text-center font-normal">
                To confirm that you are chula student, login with your chula
                email.
              </p>
              <div className="form-control ">
                <label className="label text-lg">
                  <span className="label-text text-base">
                    Login with chula email
                  </span>
                </label>
                <input
                  className="input input-bordered w-full sm:w-96"
                  placeholder="example@student.chula.ac.th"
                  {...register("email")}
                ></input>
                {
                  <label className="label pb-0">
                    <span className="label-text-alt pb-0 text-red-500">
                      {errors.email?.message}
                    </span>
                  </label>
                }
              </div>
              <div className="form-control items-center justify-center">
                <button
                  className={`btn ${
                    !isValid || isSubmitting ? "btn-disabled" : "btn-primary"
                  } ${isSubmitting && "loading loading-spinner"}}`}
                  onClick={handleSubmit(async (data) => {
                    await signIn("email", {
                      email: data.email,
                    });
                  })}
                >
                  Send Login Link
                </button>
              </div>
            </div>
          }
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerAuthSession(context);
  if (session?.user) {
    return {
      redirect: {
        destination: "/",
        permanent: true,
      },
    };
  }
  return {
    props: {},
  };
}
