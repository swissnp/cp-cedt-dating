import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import { Controller, useForm } from "react-hook-form";
import Select from "react-select";
import {
  interestsObjSchema,
  type IInterestsObj,
} from "~/utils/validator/userInput";
import { options } from "~/utils/dataOptions";
import { UserSearchResultCard } from "~/components/userSearchResultCard";
import { api } from "~/utils/api";
export default function Interest() {
  const { data: searchResults, mutate } =
    api.getUser.getUserWithInterests.useMutation();
  const { control, handleSubmit, watch } = useForm<IInterestsObj>({
    resolver: zodResolver(interestsObjSchema),
    mode: "onBlur",
  });
  return (
    <>
      <Head>
        <title>soad mai?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center">
        <div className="absolute top-0 flex h-screen flex-col  ">
          <div className="z-50 mt-0 flex flex-col items-center rounded-xl bg-base-200 p-4 drop-shadow-lg sm:top-20 sm:mt-20 sm:flex-row sm:p-6">
            <div className="flex w-full max-w-lg flex-initial">
              <Controller
                control={control}
                name={"interests"}
                render={({ field: { onChange, onBlur, value, ref } }) => (
                  <Select
                    closeMenuOnSelect={false}
                    onChange={onChange}
                    onBlur={onBlur}
                    ref={ref}
                    value={value}
                    isMulti
                    options={options}
                    classNames={{
                      container: (state) =>
                        `!border-[1px] !border-base-content/20 !bg-base-100 textarea w-full !px-2 !py-1 !z-100 ${
                          state.isFocused ? "!ring-1 !ring-base-content/20" : ""
                        }`,
                      control: (state) =>
                        `!rounded-full !border-0 !bg-base-100 ${
                          state.isFocused ? "!ring-0 !ring-base-content/20" : ""
                        }`,
                      valueContainer: () => `bg-transparent text-base-content`,
                      indicatorsContainer: () =>
                        `bg-transparent text-base-content`,
                      multiValue: () => `!rounded-lg`,
                    }}
                  />
                )}
              />
            </div>
            <button
              className="btn btn-primary mt-2 md:ml-3"
              onClick={handleSubmit((data) =>
                mutate({
                  interests: data.interests,
                })
              )}
            >
              Search
            </button>
          </div>
          <div className="overflow-scroll">
            <div className="mt-5 flex flex-col gap-6">
              {searchResults?.map((user) => {
                return (
                  <UserSearchResultCard
                    key={user.name}
                    info={user}
                    searchTerms={watch("interests")}
                  />
                );
              })}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
